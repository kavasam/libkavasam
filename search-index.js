var searchIndex = JSON.parse('{\
"libkavasam":{"doc":"","t":[13,4,13,4,6,13,3,3,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,0,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Blake2b256","Code","Email","IDType","Multihash","PhoneNumber","ReportMessage","ReportMessageBuilder","Sha2_256","Sha3_256","SignedHash","SignedHashAsciiArmored","ascii_armor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","deserialize","deserialize","deserialize","deserialize","deserialize","digest","eq","eq","eq","eq","errors","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ascii_armor","hash","hash","hashes","hashes","id","id_type","id_type","into","into","into","into","into","into","multihash_from_digest","ne","ne","new","new","public_key","serialize","serialize","serialize","serialize","serialize","sign","sign","tags","tags","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_signed_hash","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","Base64Error","MissingField","MultihashError","ServiceError","ServiceResult","borrow","borrow_mut","fmt","fmt","from","from","from","into","source","to_string","try_from","try_into","type_id","0","0","0","Identity","PublicKey","asci_armor","asci_armor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deserialize","eq","export_pkcs8","fmt","fmt","from","from","from_ascii_armor","from_ascii_armor","from_bytes","from_pkcs8","into","into","ne","new","pub_key","serialize","sign","to_bytes","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify"],"q":["libkavasam","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libkavasam::errors","","","","","","","","","","","","","","","","","","libkavasam::errors::ServiceError","","","libkavasam::id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["BLAKE2b-256 (32-byte hash size)","Supported hasing algorithms","Email ID","Identier type supported by Kavasam","A Multihash with the same allocated size as the …","Phone number","A message sent to report an identifer","Builder struct for ReportMessage","SHA2-256 (32-byte hash size)","SHA3-256 (32-byte hash size)","Represents a signed hash message, the hash being the …","ASCII armored representation of SignedHash","Get ASCII armored representation of Self","","","","","","","","","","","","","Bulid report message. This methods performs validation by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","String representation","","Hash in ASCII","Compute hashes and and attach publick key to the report …","Hashes of the identifer signed by the reporting agent","","Set IDType for the report message. MANDATORY field.","Identifier type","","","","","","","","","","Generate new signed message","Create new Self from SignedHash","public key of reporting agent","","","","","","","Signature in ASCII","Set one or more tags(type of spam) to the report message. …","Type of spam(Bank, advertisement, etc.)","","","","","","","Get SignedHash","","","","","","","","","","","","","","","","","","","","Verify a signed message","Verify a reported message","","","","","","","","","","","","","","","","","","","","","","User-owned ID in the Kavasam system","Public key of a user in the kavasam system","String representation of PublicKey","Export [Identiy] in ASCII armored form","","","","","","","","","","","","Export [Identiy] pkcs8","","","","","Load PublicKey from ASCII armored form","Load [Identiy] from ASCII armored form","load public key from bytes","Load identity from persistence","","","","Generate new identity","Get public key of user","","Sign message, proxies [Public::sign}(Public::sign)","Public key in raw bytes","","","","","","","","","verify a message against a signature using public key","Verify message, proxies [Public::verify}(Public::verify)"],"i":[1,0,2,0,0,2,0,0,1,1,0,0,3,3,4,1,2,5,6,3,4,1,2,5,6,5,3,4,1,2,5,6,3,4,1,2,5,6,5,3,4,1,2,6,1,3,4,1,2,0,3,4,1,2,5,6,3,4,1,1,1,1,2,5,6,3,3,4,5,6,0,5,6,3,4,1,2,5,6,1,3,4,3,4,6,3,4,1,2,6,3,4,5,6,3,4,1,2,5,6,4,3,4,1,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,6,7,7,7,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,10,0,0,11,12,11,12,11,12,11,12,11,12,12,11,11,12,11,12,11,12,11,12,11,12,11,12,11,12,12,11,12,11,11,12,11,12,11,12,11,12,11,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[],["signedhashasciiarmored",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["serviceresult",6,["reportmessage"]],["reportmessage",3]]],[[],["signedhash",3]],[[],["signedhashasciiarmored",3]],[[],["code",4]],[[],["idtype",4]],[[],["reportmessagebuilder",3]],[[],["reportmessage",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["reportmessagebuilder",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["multihash",6]],[[["signedhash",3]],["bool",15]],[[["signedhashasciiarmored",3]],["bool",15]],[[["code",4]],["bool",15]],[[["idtype",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["sha3digest",3]]],[[]],[[["sha2digest",3]]],[[["blake2bdigest",3]]],[[]],[[]],[[]],[[["signedhashasciiarmored",3]],["serviceresult",6]],null,null,[[["identity",3]]],null,null,[[["idtype",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["multihash",6]],[[["signedhash",3]],["bool",15]],[[["signedhashasciiarmored",3]],["bool",15]],[[["identity",3],["u64",6],["multihashgeneric",3,["u64"]]]],[[["signedhash",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["string",3],["vec",3,["string"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["signedhash",3],["serviceresult",6,["signedhash"]]]],[[],["result",4]],[[],["result",4]],[[["u64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["publickey",3]],["bool",15]],[[],["bool",15]],null,null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["base64error",4]],["serviceerror",4]],[[["multihasherror",4]],["serviceerror",4]],[[]],[[],[["error",8],["option",4,["error"]]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[],["publickey",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["publickey",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],["serviceresult",6]],[[["str",15]],["serviceresult",6]],[[]],[[]],[[]],[[]],[[["publickey",3]],["bool",15]],[[]],[[],["publickey",3]],[[],["result",4]],[[],["signature",3]],[[],[["u8",15],["vec",3,["u8"]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[],["bool",15]]],"p":[[4,"Code"],[4,"IDType"],[3,"SignedHash"],[3,"SignedHashAsciiArmored"],[3,"ReportMessageBuilder"],[3,"ReportMessage"],[4,"ServiceError"],[13,"Base64Error"],[13,"MultihashError"],[13,"MissingField"],[3,"PublicKey"],[3,"Identity"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};