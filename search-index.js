var searchIndex = JSON.parse('{\
"libkavasam":{"doc":"","t":[13,4,13,4,6,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,12,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Blake2b256","Code","Email","IDType","Multihash","PhoneNumber","ReportMessage","Sha2_256","Sha3_256","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","digest","eq","fmt","fmt","fmt","from","from","from","from","from","from","hashes","id","into","into","into","message_type","multihash_from_digest","public_key","serialize","serialize","signature","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Identity","PublicKey","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from","from_bytes","from_pkcs8","into","into","ne","new","pub_key","sign","to_bytes","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify"],"q":["libkavasam","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libkavasam::id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["BLAKE2b-256 (32-byte hash size)","","","","A Multihash with the same allocated size as the â€¦","","","SHA2-256 (32-byte hash size)","SHA3-256 (32-byte hash size)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","User-owned ID in the Kavasam system","Public key of a user in the kavasam system","","","","","","","","","","","","load public key from bytes","Load identity from persistence","","","","Generate new identity","Get public key of user","Sign message, proxies [Public::sign}(Public::sign)","Public key in raw bytes","","","","","","","","Verify message, proxies [Public::verify}(Public::verify)","verify a message against a signature using public key"],"i":[1,0,2,0,0,2,0,1,1,2,3,1,2,3,1,2,3,1,2,3,1,2,1,1,1,2,3,1,2,3,1,1,1,1,3,0,2,3,1,3,1,3,2,1,3,2,3,1,2,3,1,1,2,3,1,2,3,1,0,0,4,5,4,5,5,5,5,4,5,4,5,5,4,4,5,5,4,4,4,5,5,4,5,4,5,4,5,4,5],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["idtype",4]],[[],["reportmessage",3]],[[],["code",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["multihash",6]],[[["code",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["sha2digest",3]]],[[]],[[["blake2bdigest",3]]],[[["sha3digest",3]]],null,null,[[]],[[]],[[]],null,[[],["multihash",6]],null,[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["publickey",3]],[[]],[[["publickey",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["publickey",3]],["bool",15]],[[]],[[],["publickey",3]],[[],["signature",3]],[[],[["u8",15],["vec",3,["u8"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[],["bool",15]]],"p":[[4,"Code"],[4,"IDType"],[3,"ReportMessage"],[3,"Identity"],[3,"PublicKey"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};